// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: model-structures.go
// DO NOT EDIT!

package abm

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *AgentDescription) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *AgentDescription) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"agent-type":`)
	fflib.WriteJsonString(buf, string(mj.AgentType))
	buf.WriteString(`,"agent-num":`)
	fflib.FormatBits2(buf, uint64(mj.AgentNum), 10, mj.AgentNum < 0)
	buf.WriteString(`,"parent":`)
	fflib.WriteJsonString(buf, string(mj.ParentUUID))
	buf.WriteString(`,"creation-turn":`)
	fflib.FormatBits2(buf, uint64(mj.CreatedMT), 10, mj.CreatedMT < 0)
	buf.WriteString(`,"creation-date":`)
	fflib.WriteJsonString(buf, string(mj.CreatedAT))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_AgentDescriptionbase = iota
	ffj_t_AgentDescriptionno_such_key

	ffj_t_AgentDescription_AgentType

	ffj_t_AgentDescription_AgentNum

	ffj_t_AgentDescription_ParentUUID

	ffj_t_AgentDescription_CreatedMT

	ffj_t_AgentDescription_CreatedAT
)

var ffj_key_AgentDescription_AgentType = []byte("agent-type")

var ffj_key_AgentDescription_AgentNum = []byte("agent-num")

var ffj_key_AgentDescription_ParentUUID = []byte("parent")

var ffj_key_AgentDescription_CreatedMT = []byte("creation-turn")

var ffj_key_AgentDescription_CreatedAT = []byte("creation-date")

func (uj *AgentDescription) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *AgentDescription) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_AgentDescriptionbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_AgentDescriptionno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_AgentDescription_AgentType, kn) {
						currentKey = ffj_t_AgentDescription_AgentType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_AgentDescription_AgentNum, kn) {
						currentKey = ffj_t_AgentDescription_AgentNum
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_AgentDescription_CreatedMT, kn) {
						currentKey = ffj_t_AgentDescription_CreatedMT
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_AgentDescription_CreatedAT, kn) {
						currentKey = ffj_t_AgentDescription_CreatedAT
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_AgentDescription_ParentUUID, kn) {
						currentKey = ffj_t_AgentDescription_ParentUUID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffj_key_AgentDescription_CreatedAT, kn) {
					currentKey = ffj_t_AgentDescription_CreatedAT
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_AgentDescription_CreatedMT, kn) {
					currentKey = ffj_t_AgentDescription_CreatedMT
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_AgentDescription_ParentUUID, kn) {
					currentKey = ffj_t_AgentDescription_ParentUUID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_AgentDescription_AgentNum, kn) {
					currentKey = ffj_t_AgentDescription_AgentNum
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_AgentDescription_AgentType, kn) {
					currentKey = ffj_t_AgentDescription_AgentType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_AgentDescriptionno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_AgentDescription_AgentType:
					goto handle_AgentType

				case ffj_t_AgentDescription_AgentNum:
					goto handle_AgentNum

				case ffj_t_AgentDescription_ParentUUID:
					goto handle_ParentUUID

				case ffj_t_AgentDescription_CreatedMT:
					goto handle_CreatedMT

				case ffj_t_AgentDescription_CreatedAT:
					goto handle_CreatedAT

				case ffj_t_AgentDescriptionno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_AgentType:

	/* handler: uj.AgentType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.AgentType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AgentNum:

	/* handler: uj.AgentNum type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.AgentNum = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ParentUUID:

	/* handler: uj.ParentUUID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ParentUUID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CreatedMT:

	/* handler: uj.CreatedMT type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CreatedMT = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CreatedAT:

	/* handler: uj.CreatedAT type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.CreatedAT = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *Context) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Context) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"abm-environment-bounds":`)

	{

		err = mj.Environment.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteString(`,"abm-cpp-pop-start":`)
	fflib.FormatBits2(buf, uint64(mj.CppPopulationStart), 10, mj.CppPopulationStart < 0)
	buf.WriteString(`,"abm-cpp-pop-cap":`)
	fflib.FormatBits2(buf, uint64(mj.CppPopulationCap), 10, mj.CppPopulationCap < 0)
	if mj.CppAgeing {
		buf.WriteString(`,"abm-cpp-ageing":true`)
	} else {
		buf.WriteString(`,"abm-cpp-ageing":false`)
	}
	buf.WriteString(`,"abm-cpp-lifespan":`)
	fflib.FormatBits2(buf, uint64(mj.CppLifespan), 10, mj.CppLifespan < 0)
	buf.WriteString(`,"abm-cpp-speed":`)
	fflib.AppendFloat(buf, float64(mj.CppS), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-acceleration":`)
	fflib.AppendFloat(buf, float64(mj.CppA), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-turn":`)
	fflib.AppendFloat(buf, float64(mj.CppTurn), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-sr":`)
	fflib.AppendFloat(buf, float64(mj.CppSr), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-gestation":`)
	fflib.FormatBits2(buf, uint64(mj.CppGestation), 10, mj.CppGestation < 0)
	buf.WriteString(`,"abm-cpp-sexual-cost":`)
	fflib.FormatBits2(buf, uint64(mj.CppSexualCost), 10, mj.CppSexualCost < 0)
	buf.WriteString(`,"abm-cpp-reproduction-chance":`)
	fflib.AppendFloat(buf, float64(mj.CppReproductionChance), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-spawn-size":`)
	fflib.FormatBits2(buf, uint64(mj.CppSpawnSize), 10, mj.CppSpawnSize < 0)
	buf.WriteString(`,"abm-cpp-mf":`)
	fflib.AppendFloat(buf, float64(mj.CppMutationFactor), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-pop-start":`)
	fflib.FormatBits2(buf, uint64(mj.VpPopulationStart), 10, mj.VpPopulationStart < 0)
	buf.WriteString(`,"abm-vp-pop-cap":`)
	fflib.FormatBits2(buf, uint64(mj.VpPopulationCap), 10, mj.VpPopulationCap < 0)
	if mj.VpAgeing {
		buf.WriteString(`,"abm-vp-ageing":true`)
	} else {
		buf.WriteString(`,"abm-vp-ageing":false`)
	}
	buf.WriteString(`,"abm-vp-lifespan":`)
	fflib.FormatBits2(buf, uint64(mj.VpLifespan), 10, mj.VpLifespan < 0)
	buf.WriteString(`,"abm-vp-starvation-point":`)
	fflib.FormatBits2(buf, uint64(mj.VpStarvationPoint), 10, mj.VpStarvationPoint < 0)
	buf.WriteString(`,"abm-vp-panic-point":`)
	fflib.FormatBits2(buf, uint64(mj.VpPanicPoint), 10, mj.VpPanicPoint < 0)
	buf.WriteString(`,"abm-vp-gestation":`)
	fflib.FormatBits2(buf, uint64(mj.VpGestation), 10, mj.VpGestation < 0)
	buf.WriteString(`,"abm-vp-sex-req":`)
	fflib.FormatBits2(buf, uint64(mj.VpSexualRequirement), 10, mj.VpSexualRequirement < 0)
	buf.WriteString(`,"abm-vp-speed":`)
	fflib.AppendFloat(buf, float64(mj.VpMovS), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-acceleration":`)
	fflib.AppendFloat(buf, float64(mj.VpMovA), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-turn":`)
	fflib.AppendFloat(buf, float64(mj.VpTurn), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-vsr":`)
	fflib.AppendFloat(buf, float64(mj.Vsr), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-visual-search-tolerance":`)
	fflib.AppendFloat(buf, float64(mj.Vb𝛄), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-visual-search-tolerance-bump":`)
	fflib.AppendFloat(buf, float64(mj.V𝛄Bump), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-baseline-col-sig-strength":`)
	fflib.AppendFloat(buf, float64(mj.Vbε), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-max-col-sig-strength":`)
	fflib.AppendFloat(buf, float64(mj.Vmε), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-reproduction-chance":`)
	fflib.AppendFloat(buf, float64(mj.VpReproductionChance), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-spawn-size":`)
	fflib.FormatBits2(buf, uint64(mj.VpSpawnSize), 10, mj.VpSpawnSize < 0)
	buf.WriteString(`,"abm-vp-vsr-chance":`)
	fflib.AppendFloat(buf, float64(mj.VpSearchChance), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-attack-chance":`)
	fflib.AppendFloat(buf, float64(mj.VpAttackChance), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-baseline-attack-gain":`)
	fflib.AppendFloat(buf, float64(mj.Vbg), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-col-adaptation-factor":`)
	fflib.AppendFloat(buf, float64(mj.VpCaf), 'g', -1, 64)
	if mj.VpStarvation {
		buf.WriteString(`,"abm-vp-starvation":true`)
	} else {
		buf.WriteString(`,"abm-vp-starvation":false`)
	}
	if mj.RandomAges {
		buf.WriteString(`,"abm-random-ages":true`)
	} else {
		buf.WriteString(`,"abm-random-ages":false`)
	}
	if mj.RNGRandomSeed {
		buf.WriteString(`,"abm-rng-random-seed":true`)
	} else {
		buf.WriteString(`,"abm-rng-random-seed":false`)
	}
	buf.WriteString(`,"abm-rng-seedval":`)
	fflib.FormatBits2(buf, uint64(mj.RNGSeedVal), 10, mj.RNGSeedVal < 0)
	buf.WriteString(`,"abm-rng-fuzziness":`)
	fflib.AppendFloat(buf, float64(mj.Fuzzy), 'g', -1, 64)
	if mj.Logging {
		buf.WriteString(`,"abm-logging-flag":true`)
	} else {
		buf.WriteString(`,"abm-logging-flag":false`)
	}
	buf.WriteString(`,"abm-log-frequency":`)
	fflib.FormatBits2(buf, uint64(mj.LogFreq), 10, mj.LogFreq < 0)
	if mj.UseCustomLogPath {
		buf.WriteString(`,"abm-use-custom-log-filepath":true`)
	} else {
		buf.WriteString(`,"abm-use-custom-log-filepath":false`)
	}
	buf.WriteString(`,"abm-custom-log-filepath":`)
	fflib.WriteJsonString(buf, string(mj.CustomLogPath))
	buf.WriteString(`,"abm-log-filepath":`)
	fflib.WriteJsonString(buf, string(mj.LogPath))
	if mj.Visualise {
		buf.WriteString(`,"abm-visualise-flag":true`)
	} else {
		buf.WriteString(`,"abm-visualise-flag":false`)
	}
	if mj.LimitDuration {
		buf.WriteString(`,"abm-limit-duration":true`)
	} else {
		buf.WriteString(`,"abm-limit-duration":false`)
	}
	buf.WriteString(`,"abm-fixed-duration":`)
	fflib.FormatBits2(buf, uint64(mj.FixedDuration), 10, mj.FixedDuration < 0)
	buf.WriteString(`,"abm-session-identifier":`)
	fflib.WriteJsonString(buf, string(mj.SessionIdentifier))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Contextbase = iota
	ffj_t_Contextno_such_key

	ffj_t_Context_Environment

	ffj_t_Context_CppPopulationStart

	ffj_t_Context_CppPopulationCap

	ffj_t_Context_CppAgeing

	ffj_t_Context_CppLifespan

	ffj_t_Context_CppS

	ffj_t_Context_CppA

	ffj_t_Context_CppTurn

	ffj_t_Context_CppSr

	ffj_t_Context_CppGestation

	ffj_t_Context_CppSexualCost

	ffj_t_Context_CppReproductionChance

	ffj_t_Context_CppSpawnSize

	ffj_t_Context_CppMutationFactor

	ffj_t_Context_VpPopulationStart

	ffj_t_Context_VpPopulationCap

	ffj_t_Context_VpAgeing

	ffj_t_Context_VpLifespan

	ffj_t_Context_VpStarvationPoint

	ffj_t_Context_VpPanicPoint

	ffj_t_Context_VpGestation

	ffj_t_Context_VpSexualRequirement

	ffj_t_Context_VpMovS

	ffj_t_Context_VpMovA

	ffj_t_Context_VpTurn

	ffj_t_Context_Vsr

	ffj_t_Context_Vb𝛄

	ffj_t_Context_V𝛄Bump

	ffj_t_Context_Vbε

	ffj_t_Context_Vmε

	ffj_t_Context_VpReproductionChance

	ffj_t_Context_VpSpawnSize

	ffj_t_Context_VpSearchChance

	ffj_t_Context_VpAttackChance

	ffj_t_Context_Vbg

	ffj_t_Context_VpCaf

	ffj_t_Context_VpStarvation

	ffj_t_Context_RandomAges

	ffj_t_Context_RNGRandomSeed

	ffj_t_Context_RNGSeedVal

	ffj_t_Context_Fuzzy

	ffj_t_Context_Logging

	ffj_t_Context_LogFreq

	ffj_t_Context_UseCustomLogPath

	ffj_t_Context_CustomLogPath

	ffj_t_Context_LogPath

	ffj_t_Context_Visualise

	ffj_t_Context_LimitDuration

	ffj_t_Context_FixedDuration

	ffj_t_Context_SessionIdentifier
)

var ffj_key_Context_Environment = []byte("abm-environment-bounds")

var ffj_key_Context_CppPopulationStart = []byte("abm-cpp-pop-start")

var ffj_key_Context_CppPopulationCap = []byte("abm-cpp-pop-cap")

var ffj_key_Context_CppAgeing = []byte("abm-cpp-ageing")

var ffj_key_Context_CppLifespan = []byte("abm-cpp-lifespan")

var ffj_key_Context_CppS = []byte("abm-cpp-speed")

var ffj_key_Context_CppA = []byte("abm-cpp-acceleration")

var ffj_key_Context_CppTurn = []byte("abm-cpp-turn")

var ffj_key_Context_CppSr = []byte("abm-cpp-sr")

var ffj_key_Context_CppGestation = []byte("abm-cpp-gestation")

var ffj_key_Context_CppSexualCost = []byte("abm-cpp-sexual-cost")

var ffj_key_Context_CppReproductionChance = []byte("abm-cpp-reproduction-chance")

var ffj_key_Context_CppSpawnSize = []byte("abm-cpp-spawn-size")

var ffj_key_Context_CppMutationFactor = []byte("abm-cpp-mf")

var ffj_key_Context_VpPopulationStart = []byte("abm-vp-pop-start")

var ffj_key_Context_VpPopulationCap = []byte("abm-vp-pop-cap")

var ffj_key_Context_VpAgeing = []byte("abm-vp-ageing")

var ffj_key_Context_VpLifespan = []byte("abm-vp-lifespan")

var ffj_key_Context_VpStarvationPoint = []byte("abm-vp-starvation-point")

var ffj_key_Context_VpPanicPoint = []byte("abm-vp-panic-point")

var ffj_key_Context_VpGestation = []byte("abm-vp-gestation")

var ffj_key_Context_VpSexualRequirement = []byte("abm-vp-sex-req")

var ffj_key_Context_VpMovS = []byte("abm-vp-speed")

var ffj_key_Context_VpMovA = []byte("abm-vp-acceleration")

var ffj_key_Context_VpTurn = []byte("abm-vp-turn")

var ffj_key_Context_Vsr = []byte("abm-vp-vsr")

var ffj_key_Context_Vb𝛄 = []byte("abm-vp-visual-search-tolerance")

var ffj_key_Context_V𝛄Bump = []byte("abm-vp-visual-search-tolerance-bump")

var ffj_key_Context_Vbε = []byte("abm-vp-baseline-col-sig-strength")

var ffj_key_Context_Vmε = []byte("abm-vp-max-col-sig-strength")

var ffj_key_Context_VpReproductionChance = []byte("abm-vp-reproduction-chance")

var ffj_key_Context_VpSpawnSize = []byte("abm-vp-spawn-size")

var ffj_key_Context_VpSearchChance = []byte("abm-vp-vsr-chance")

var ffj_key_Context_VpAttackChance = []byte("abm-vp-attack-chance")

var ffj_key_Context_Vbg = []byte("abm-vp-baseline-attack-gain")

var ffj_key_Context_VpCaf = []byte("abm-vp-col-adaptation-factor")

var ffj_key_Context_VpStarvation = []byte("abm-vp-starvation")

var ffj_key_Context_RandomAges = []byte("abm-random-ages")

var ffj_key_Context_RNGRandomSeed = []byte("abm-rng-random-seed")

var ffj_key_Context_RNGSeedVal = []byte("abm-rng-seedval")

var ffj_key_Context_Fuzzy = []byte("abm-rng-fuzziness")

var ffj_key_Context_Logging = []byte("abm-logging-flag")

var ffj_key_Context_LogFreq = []byte("abm-log-frequency")

var ffj_key_Context_UseCustomLogPath = []byte("abm-use-custom-log-filepath")

var ffj_key_Context_CustomLogPath = []byte("abm-custom-log-filepath")

var ffj_key_Context_LogPath = []byte("abm-log-filepath")

var ffj_key_Context_Visualise = []byte("abm-visualise-flag")

var ffj_key_Context_LimitDuration = []byte("abm-limit-duration")

var ffj_key_Context_FixedDuration = []byte("abm-fixed-duration")

var ffj_key_Context_SessionIdentifier = []byte("abm-session-identifier")

func (uj *Context) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Context) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Contextbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Contextno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_Context_Environment, kn) {
						currentKey = ffj_t_Context_Environment
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppPopulationStart, kn) {
						currentKey = ffj_t_Context_CppPopulationStart
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppPopulationCap, kn) {
						currentKey = ffj_t_Context_CppPopulationCap
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppAgeing, kn) {
						currentKey = ffj_t_Context_CppAgeing
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppLifespan, kn) {
						currentKey = ffj_t_Context_CppLifespan
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppS, kn) {
						currentKey = ffj_t_Context_CppS
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppA, kn) {
						currentKey = ffj_t_Context_CppA
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppTurn, kn) {
						currentKey = ffj_t_Context_CppTurn
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppSr, kn) {
						currentKey = ffj_t_Context_CppSr
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppGestation, kn) {
						currentKey = ffj_t_Context_CppGestation
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppSexualCost, kn) {
						currentKey = ffj_t_Context_CppSexualCost
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppReproductionChance, kn) {
						currentKey = ffj_t_Context_CppReproductionChance
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppSpawnSize, kn) {
						currentKey = ffj_t_Context_CppSpawnSize
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CppMutationFactor, kn) {
						currentKey = ffj_t_Context_CppMutationFactor
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpPopulationStart, kn) {
						currentKey = ffj_t_Context_VpPopulationStart
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpPopulationCap, kn) {
						currentKey = ffj_t_Context_VpPopulationCap
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpAgeing, kn) {
						currentKey = ffj_t_Context_VpAgeing
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpLifespan, kn) {
						currentKey = ffj_t_Context_VpLifespan
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpStarvationPoint, kn) {
						currentKey = ffj_t_Context_VpStarvationPoint
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpPanicPoint, kn) {
						currentKey = ffj_t_Context_VpPanicPoint
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpGestation, kn) {
						currentKey = ffj_t_Context_VpGestation
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpSexualRequirement, kn) {
						currentKey = ffj_t_Context_VpSexualRequirement
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpMovS, kn) {
						currentKey = ffj_t_Context_VpMovS
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpMovA, kn) {
						currentKey = ffj_t_Context_VpMovA
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpTurn, kn) {
						currentKey = ffj_t_Context_VpTurn
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_Vsr, kn) {
						currentKey = ffj_t_Context_Vsr
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_Vb𝛄, kn) {
						currentKey = ffj_t_Context_Vb𝛄
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_V𝛄Bump, kn) {
						currentKey = ffj_t_Context_V𝛄Bump
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_Vbε, kn) {
						currentKey = ffj_t_Context_Vbε
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_Vmε, kn) {
						currentKey = ffj_t_Context_Vmε
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpReproductionChance, kn) {
						currentKey = ffj_t_Context_VpReproductionChance
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpSpawnSize, kn) {
						currentKey = ffj_t_Context_VpSpawnSize
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpSearchChance, kn) {
						currentKey = ffj_t_Context_VpSearchChance
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpAttackChance, kn) {
						currentKey = ffj_t_Context_VpAttackChance
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_Vbg, kn) {
						currentKey = ffj_t_Context_Vbg
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpCaf, kn) {
						currentKey = ffj_t_Context_VpCaf
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_VpStarvation, kn) {
						currentKey = ffj_t_Context_VpStarvation
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_RandomAges, kn) {
						currentKey = ffj_t_Context_RandomAges
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_RNGRandomSeed, kn) {
						currentKey = ffj_t_Context_RNGRandomSeed
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_RNGSeedVal, kn) {
						currentKey = ffj_t_Context_RNGSeedVal
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_Fuzzy, kn) {
						currentKey = ffj_t_Context_Fuzzy
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_Logging, kn) {
						currentKey = ffj_t_Context_Logging
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_LogFreq, kn) {
						currentKey = ffj_t_Context_LogFreq
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_UseCustomLogPath, kn) {
						currentKey = ffj_t_Context_UseCustomLogPath
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_CustomLogPath, kn) {
						currentKey = ffj_t_Context_CustomLogPath
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_LogPath, kn) {
						currentKey = ffj_t_Context_LogPath
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_Visualise, kn) {
						currentKey = ffj_t_Context_Visualise
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_LimitDuration, kn) {
						currentKey = ffj_t_Context_LimitDuration
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_FixedDuration, kn) {
						currentKey = ffj_t_Context_FixedDuration
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Context_SessionIdentifier, kn) {
						currentKey = ffj_t_Context_SessionIdentifier
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_Context_SessionIdentifier, kn) {
					currentKey = ffj_t_Context_SessionIdentifier
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_FixedDuration, kn) {
					currentKey = ffj_t_Context_FixedDuration
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_LimitDuration, kn) {
					currentKey = ffj_t_Context_LimitDuration
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_Visualise, kn) {
					currentKey = ffj_t_Context_Visualise
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_LogPath, kn) {
					currentKey = ffj_t_Context_LogPath
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_CustomLogPath, kn) {
					currentKey = ffj_t_Context_CustomLogPath
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_UseCustomLogPath, kn) {
					currentKey = ffj_t_Context_UseCustomLogPath
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_LogFreq, kn) {
					currentKey = ffj_t_Context_LogFreq
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_Logging, kn) {
					currentKey = ffj_t_Context_Logging
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_Fuzzy, kn) {
					currentKey = ffj_t_Context_Fuzzy
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_RNGSeedVal, kn) {
					currentKey = ffj_t_Context_RNGSeedVal
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_RNGRandomSeed, kn) {
					currentKey = ffj_t_Context_RNGRandomSeed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_RandomAges, kn) {
					currentKey = ffj_t_Context_RandomAges
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpStarvation, kn) {
					currentKey = ffj_t_Context_VpStarvation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_VpCaf, kn) {
					currentKey = ffj_t_Context_VpCaf
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_Vbg, kn) {
					currentKey = ffj_t_Context_Vbg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpAttackChance, kn) {
					currentKey = ffj_t_Context_VpAttackChance
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpSearchChance, kn) {
					currentKey = ffj_t_Context_VpSearchChance
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpSpawnSize, kn) {
					currentKey = ffj_t_Context_VpSpawnSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_VpReproductionChance, kn) {
					currentKey = ffj_t_Context_VpReproductionChance
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_Vmε, kn) {
					currentKey = ffj_t_Context_Vmε
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_Vbε, kn) {
					currentKey = ffj_t_Context_Vbε
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_V𝛄Bump, kn) {
					currentKey = ffj_t_Context_V𝛄Bump
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_Vb𝛄, kn) {
					currentKey = ffj_t_Context_Vb𝛄
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_Vsr, kn) {
					currentKey = ffj_t_Context_Vsr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_VpTurn, kn) {
					currentKey = ffj_t_Context_VpTurn
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_VpMovA, kn) {
					currentKey = ffj_t_Context_VpMovA
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpMovS, kn) {
					currentKey = ffj_t_Context_VpMovS
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpSexualRequirement, kn) {
					currentKey = ffj_t_Context_VpSexualRequirement
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpGestation, kn) {
					currentKey = ffj_t_Context_VpGestation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_VpPanicPoint, kn) {
					currentKey = ffj_t_Context_VpPanicPoint
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpStarvationPoint, kn) {
					currentKey = ffj_t_Context_VpStarvationPoint
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpLifespan, kn) {
					currentKey = ffj_t_Context_VpLifespan
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_VpAgeing, kn) {
					currentKey = ffj_t_Context_VpAgeing
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_VpPopulationCap, kn) {
					currentKey = ffj_t_Context_VpPopulationCap
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_VpPopulationStart, kn) {
					currentKey = ffj_t_Context_VpPopulationStart
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_CppMutationFactor, kn) {
					currentKey = ffj_t_Context_CppMutationFactor
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_CppSpawnSize, kn) {
					currentKey = ffj_t_Context_CppSpawnSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_CppReproductionChance, kn) {
					currentKey = ffj_t_Context_CppReproductionChance
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_CppSexualCost, kn) {
					currentKey = ffj_t_Context_CppSexualCost
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_CppGestation, kn) {
					currentKey = ffj_t_Context_CppGestation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_CppSr, kn) {
					currentKey = ffj_t_Context_CppSr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_CppTurn, kn) {
					currentKey = ffj_t_Context_CppTurn
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_CppA, kn) {
					currentKey = ffj_t_Context_CppA
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_CppS, kn) {
					currentKey = ffj_t_Context_CppS
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_CppLifespan, kn) {
					currentKey = ffj_t_Context_CppLifespan
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_CppAgeing, kn) {
					currentKey = ffj_t_Context_CppAgeing
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Context_CppPopulationCap, kn) {
					currentKey = ffj_t_Context_CppPopulationCap
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_CppPopulationStart, kn) {
					currentKey = ffj_t_Context_CppPopulationStart
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Context_Environment, kn) {
					currentKey = ffj_t_Context_Environment
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Contextno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Context_Environment:
					goto handle_Environment

				case ffj_t_Context_CppPopulationStart:
					goto handle_CppPopulationStart

				case ffj_t_Context_CppPopulationCap:
					goto handle_CppPopulationCap

				case ffj_t_Context_CppAgeing:
					goto handle_CppAgeing

				case ffj_t_Context_CppLifespan:
					goto handle_CppLifespan

				case ffj_t_Context_CppS:
					goto handle_CppS

				case ffj_t_Context_CppA:
					goto handle_CppA

				case ffj_t_Context_CppTurn:
					goto handle_CppTurn

				case ffj_t_Context_CppSr:
					goto handle_CppSr

				case ffj_t_Context_CppGestation:
					goto handle_CppGestation

				case ffj_t_Context_CppSexualCost:
					goto handle_CppSexualCost

				case ffj_t_Context_CppReproductionChance:
					goto handle_CppReproductionChance

				case ffj_t_Context_CppSpawnSize:
					goto handle_CppSpawnSize

				case ffj_t_Context_CppMutationFactor:
					goto handle_CppMutationFactor

				case ffj_t_Context_VpPopulationStart:
					goto handle_VpPopulationStart

				case ffj_t_Context_VpPopulationCap:
					goto handle_VpPopulationCap

				case ffj_t_Context_VpAgeing:
					goto handle_VpAgeing

				case ffj_t_Context_VpLifespan:
					goto handle_VpLifespan

				case ffj_t_Context_VpStarvationPoint:
					goto handle_VpStarvationPoint

				case ffj_t_Context_VpPanicPoint:
					goto handle_VpPanicPoint

				case ffj_t_Context_VpGestation:
					goto handle_VpGestation

				case ffj_t_Context_VpSexualRequirement:
					goto handle_VpSexualRequirement

				case ffj_t_Context_VpMovS:
					goto handle_VpMovS

				case ffj_t_Context_VpMovA:
					goto handle_VpMovA

				case ffj_t_Context_VpTurn:
					goto handle_VpTurn

				case ffj_t_Context_Vsr:
					goto handle_Vsr

				case ffj_t_Context_Vb𝛄:
					goto handle_Vb𝛄

				case ffj_t_Context_V𝛄Bump:
					goto handle_V𝛄Bump

				case ffj_t_Context_Vbε:
					goto handle_Vbε

				case ffj_t_Context_Vmε:
					goto handle_Vmε

				case ffj_t_Context_VpReproductionChance:
					goto handle_VpReproductionChance

				case ffj_t_Context_VpSpawnSize:
					goto handle_VpSpawnSize

				case ffj_t_Context_VpSearchChance:
					goto handle_VpSearchChance

				case ffj_t_Context_VpAttackChance:
					goto handle_VpAttackChance

				case ffj_t_Context_Vbg:
					goto handle_Vbg

				case ffj_t_Context_VpCaf:
					goto handle_VpCaf

				case ffj_t_Context_VpStarvation:
					goto handle_VpStarvation

				case ffj_t_Context_RandomAges:
					goto handle_RandomAges

				case ffj_t_Context_RNGRandomSeed:
					goto handle_RNGRandomSeed

				case ffj_t_Context_RNGSeedVal:
					goto handle_RNGSeedVal

				case ffj_t_Context_Fuzzy:
					goto handle_Fuzzy

				case ffj_t_Context_Logging:
					goto handle_Logging

				case ffj_t_Context_LogFreq:
					goto handle_LogFreq

				case ffj_t_Context_UseCustomLogPath:
					goto handle_UseCustomLogPath

				case ffj_t_Context_CustomLogPath:
					goto handle_CustomLogPath

				case ffj_t_Context_LogPath:
					goto handle_LogPath

				case ffj_t_Context_Visualise:
					goto handle_Visualise

				case ffj_t_Context_LimitDuration:
					goto handle_LimitDuration

				case ffj_t_Context_FixedDuration:
					goto handle_FixedDuration

				case ffj_t_Context_SessionIdentifier:
					goto handle_SessionIdentifier

				case ffj_t_Contextno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Environment:

	/* handler: uj.Environment type=abm.Environment kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			state = fflib.FFParse_after_value
			goto mainparse
		}

		err = uj.Environment.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppPopulationStart:

	/* handler: uj.CppPopulationStart type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppPopulationStart = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppPopulationCap:

	/* handler: uj.CppPopulationCap type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppPopulationCap = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppAgeing:

	/* handler: uj.CppAgeing type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CppAgeing = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CppAgeing = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppLifespan:

	/* handler: uj.CppLifespan type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppLifespan = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppS:

	/* handler: uj.CppS type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppS = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppA:

	/* handler: uj.CppA type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppA = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppTurn:

	/* handler: uj.CppTurn type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppTurn = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppSr:

	/* handler: uj.CppSr type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppSr = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppGestation:

	/* handler: uj.CppGestation type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppGestation = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppSexualCost:

	/* handler: uj.CppSexualCost type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppSexualCost = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppReproductionChance:

	/* handler: uj.CppReproductionChance type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppReproductionChance = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppSpawnSize:

	/* handler: uj.CppSpawnSize type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppSpawnSize = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppMutationFactor:

	/* handler: uj.CppMutationFactor type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppMutationFactor = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpPopulationStart:

	/* handler: uj.VpPopulationStart type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpPopulationStart = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpPopulationCap:

	/* handler: uj.VpPopulationCap type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpPopulationCap = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpAgeing:

	/* handler: uj.VpAgeing type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.VpAgeing = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.VpAgeing = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpLifespan:

	/* handler: uj.VpLifespan type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpLifespan = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpStarvationPoint:

	/* handler: uj.VpStarvationPoint type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpStarvationPoint = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpPanicPoint:

	/* handler: uj.VpPanicPoint type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpPanicPoint = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpGestation:

	/* handler: uj.VpGestation type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpGestation = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpSexualRequirement:

	/* handler: uj.VpSexualRequirement type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpSexualRequirement = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpMovS:

	/* handler: uj.VpMovS type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpMovS = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpMovA:

	/* handler: uj.VpMovA type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpMovA = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpTurn:

	/* handler: uj.VpTurn type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpTurn = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vsr:

	/* handler: uj.Vsr type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vsr = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vb𝛄:

	/* handler: uj.Vb𝛄 type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vb𝛄 = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_V𝛄Bump:

	/* handler: uj.V𝛄Bump type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.V𝛄Bump = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vbε:

	/* handler: uj.Vbε type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vbε = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vmε:

	/* handler: uj.Vmε type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vmε = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpReproductionChance:

	/* handler: uj.VpReproductionChance type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpReproductionChance = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpSpawnSize:

	/* handler: uj.VpSpawnSize type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpSpawnSize = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpSearchChance:

	/* handler: uj.VpSearchChance type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpSearchChance = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpAttackChance:

	/* handler: uj.VpAttackChance type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpAttackChance = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vbg:

	/* handler: uj.Vbg type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vbg = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpCaf:

	/* handler: uj.VpCaf type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpCaf = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpStarvation:

	/* handler: uj.VpStarvation type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.VpStarvation = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.VpStarvation = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RandomAges:

	/* handler: uj.RandomAges type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.RandomAges = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.RandomAges = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RNGRandomSeed:

	/* handler: uj.RNGRandomSeed type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.RNGRandomSeed = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.RNGRandomSeed = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RNGSeedVal:

	/* handler: uj.RNGSeedVal type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.RNGSeedVal = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Fuzzy:

	/* handler: uj.Fuzzy type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Fuzzy = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Logging:

	/* handler: uj.Logging type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.Logging = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.Logging = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LogFreq:

	/* handler: uj.LogFreq type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.LogFreq = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UseCustomLogPath:

	/* handler: uj.UseCustomLogPath type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.UseCustomLogPath = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.UseCustomLogPath = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CustomLogPath:

	/* handler: uj.CustomLogPath type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.CustomLogPath = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LogPath:

	/* handler: uj.LogPath type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.LogPath = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Visualise:

	/* handler: uj.Visualise type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.Visualise = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.Visualise = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LimitDuration:

	/* handler: uj.LimitDuration type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.LimitDuration = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.LimitDuration = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FixedDuration:

	/* handler: uj.FixedDuration type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.FixedDuration = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SessionIdentifier:

	/* handler: uj.SessionIdentifier type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SessionIdentifier = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *Environment) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Environment) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"abm-environment-bounds":`)
	if mj.Bounds != nil {
		buf.WriteString(`[`)
		for i, v := range mj.Bounds {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.AppendFloat(buf, float64(v), 'g', -1, 64)
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"abm-environment-dimensionality":`)
	fflib.FormatBits2(buf, uint64(mj.Dimensionality), 10, mj.Dimensionality < 0)
	buf.WriteString(`,"abm-environment-background":`)

	{

		err = mj.BG.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Environmentbase = iota
	ffj_t_Environmentno_such_key

	ffj_t_Environment_Bounds

	ffj_t_Environment_Dimensionality

	ffj_t_Environment_BG
)

var ffj_key_Environment_Bounds = []byte("abm-environment-bounds")

var ffj_key_Environment_Dimensionality = []byte("abm-environment-dimensionality")

var ffj_key_Environment_BG = []byte("abm-environment-background")

func (uj *Environment) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Environment) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Environmentbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Environmentno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_Environment_Bounds, kn) {
						currentKey = ffj_t_Environment_Bounds
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Environment_Dimensionality, kn) {
						currentKey = ffj_t_Environment_Dimensionality
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Environment_BG, kn) {
						currentKey = ffj_t_Environment_BG
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_Environment_BG, kn) {
					currentKey = ffj_t_Environment_BG
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Environment_Dimensionality, kn) {
					currentKey = ffj_t_Environment_Dimensionality
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Environment_Bounds, kn) {
					currentKey = ffj_t_Environment_Bounds
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Environmentno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Environment_Bounds:
					goto handle_Bounds

				case ffj_t_Environment_Dimensionality:
					goto handle_Dimensionality

				case ffj_t_Environment_BG:
					goto handle_BG

				case ffj_t_Environmentno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Bounds:

	/* handler: uj.Bounds type=[]float64 kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Bounds = nil
		} else {

			uj.Bounds = make([]float64, 0)

			wantVal := true

			for {

				var tmp_uj__Bounds float64

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Bounds type=float64 kind=float64 quoted=false*/

				{
					if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						tmp_uj__Bounds = float64(tval)

					}
				}

				uj.Bounds = append(uj.Bounds, tmp_uj__Bounds)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Dimensionality:

	/* handler: uj.Dimensionality type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Dimensionality = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BG:

	/* handler: uj.BG type=colour.RGB kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			state = fflib.FFParse_after_value
			goto mainparse
		}

		err = uj.BG.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *Model) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Model) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if mj.Dead {
		buf.WriteString(`{"Dead":true`)
	} else {
		buf.WriteString(`{"Dead":false`)
	}
	buf.WriteString(`,"Om":`)
	/* Falling back. type=chan gobr.OutMsg kind=chan */
	err = buf.Encode(mj.Om)
	if err != nil {
		return err
	}
	buf.WriteString(`,"Im":`)
	/* Falling back. type=chan gobr.InMsg kind=chan */
	err = buf.Encode(mj.Im)
	if err != nil {
		return err
	}
	buf.WriteString(`,"Quit":`)
	/* Falling back. type=chan struct {} kind=chan */
	err = buf.Encode(mj.Quit)
	if err != nil {
		return err
	}
	buf.WriteString(`,"Turn":`)
	fflib.FormatBits2(buf, uint64(mj.Turn), 10, mj.Turn < 0)
	buf.WriteString(`,"Phase":`)
	fflib.FormatBits2(buf, uint64(mj.Phase), 10, mj.Phase < 0)
	buf.WriteString(`,"Action":`)
	fflib.FormatBits2(buf, uint64(mj.Action), 10, mj.Action < 0)
	buf.WriteString(`,"abm-environment-bounds":`)
	if mj.Bounds != nil {
		buf.WriteString(`[`)
		for i, v := range mj.Bounds {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.AppendFloat(buf, float64(v), 'g', -1, 64)
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"abm-environment-dimensionality":`)
	fflib.FormatBits2(buf, uint64(mj.Dimensionality), 10, mj.Dimensionality < 0)
	buf.WriteString(`,"abm-environment-background":`)

	{

		err = mj.BG.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteString(`,"abm-environment-bounds":`)

	{

		err = mj.Environment.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteString(`,"abm-cpp-pop-start":`)
	fflib.FormatBits2(buf, uint64(mj.CppPopulationStart), 10, mj.CppPopulationStart < 0)
	buf.WriteString(`,"abm-cpp-pop-cap":`)
	fflib.FormatBits2(buf, uint64(mj.CppPopulationCap), 10, mj.CppPopulationCap < 0)
	if mj.CppAgeing {
		buf.WriteString(`,"abm-cpp-ageing":true`)
	} else {
		buf.WriteString(`,"abm-cpp-ageing":false`)
	}
	buf.WriteString(`,"abm-cpp-lifespan":`)
	fflib.FormatBits2(buf, uint64(mj.CppLifespan), 10, mj.CppLifespan < 0)
	buf.WriteString(`,"abm-cpp-speed":`)
	fflib.AppendFloat(buf, float64(mj.CppS), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-acceleration":`)
	fflib.AppendFloat(buf, float64(mj.CppA), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-turn":`)
	fflib.AppendFloat(buf, float64(mj.CppTurn), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-sr":`)
	fflib.AppendFloat(buf, float64(mj.CppSr), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-gestation":`)
	fflib.FormatBits2(buf, uint64(mj.CppGestation), 10, mj.CppGestation < 0)
	buf.WriteString(`,"abm-cpp-sexual-cost":`)
	fflib.FormatBits2(buf, uint64(mj.CppSexualCost), 10, mj.CppSexualCost < 0)
	buf.WriteString(`,"abm-cpp-reproduction-chance":`)
	fflib.AppendFloat(buf, float64(mj.CppReproductionChance), 'g', -1, 64)
	buf.WriteString(`,"abm-cpp-spawn-size":`)
	fflib.FormatBits2(buf, uint64(mj.CppSpawnSize), 10, mj.CppSpawnSize < 0)
	buf.WriteString(`,"abm-cpp-mf":`)
	fflib.AppendFloat(buf, float64(mj.CppMutationFactor), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-pop-start":`)
	fflib.FormatBits2(buf, uint64(mj.VpPopulationStart), 10, mj.VpPopulationStart < 0)
	buf.WriteString(`,"abm-vp-pop-cap":`)
	fflib.FormatBits2(buf, uint64(mj.VpPopulationCap), 10, mj.VpPopulationCap < 0)
	if mj.VpAgeing {
		buf.WriteString(`,"abm-vp-ageing":true`)
	} else {
		buf.WriteString(`,"abm-vp-ageing":false`)
	}
	buf.WriteString(`,"abm-vp-lifespan":`)
	fflib.FormatBits2(buf, uint64(mj.VpLifespan), 10, mj.VpLifespan < 0)
	buf.WriteString(`,"abm-vp-starvation-point":`)
	fflib.FormatBits2(buf, uint64(mj.VpStarvationPoint), 10, mj.VpStarvationPoint < 0)
	buf.WriteString(`,"abm-vp-panic-point":`)
	fflib.FormatBits2(buf, uint64(mj.VpPanicPoint), 10, mj.VpPanicPoint < 0)
	buf.WriteString(`,"abm-vp-gestation":`)
	fflib.FormatBits2(buf, uint64(mj.VpGestation), 10, mj.VpGestation < 0)
	buf.WriteString(`,"abm-vp-sex-req":`)
	fflib.FormatBits2(buf, uint64(mj.VpSexualRequirement), 10, mj.VpSexualRequirement < 0)
	buf.WriteString(`,"abm-vp-speed":`)
	fflib.AppendFloat(buf, float64(mj.VpMovS), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-acceleration":`)
	fflib.AppendFloat(buf, float64(mj.VpMovA), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-turn":`)
	fflib.AppendFloat(buf, float64(mj.VpTurn), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-vsr":`)
	fflib.AppendFloat(buf, float64(mj.Vsr), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-visual-search-tolerance":`)
	fflib.AppendFloat(buf, float64(mj.Vb𝛄), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-visual-search-tolerance-bump":`)
	fflib.AppendFloat(buf, float64(mj.V𝛄Bump), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-baseline-col-sig-strength":`)
	fflib.AppendFloat(buf, float64(mj.Vbε), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-max-col-sig-strength":`)
	fflib.AppendFloat(buf, float64(mj.Vmε), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-reproduction-chance":`)
	fflib.AppendFloat(buf, float64(mj.VpReproductionChance), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-spawn-size":`)
	fflib.FormatBits2(buf, uint64(mj.VpSpawnSize), 10, mj.VpSpawnSize < 0)
	buf.WriteString(`,"abm-vp-vsr-chance":`)
	fflib.AppendFloat(buf, float64(mj.VpSearchChance), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-attack-chance":`)
	fflib.AppendFloat(buf, float64(mj.VpAttackChance), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-baseline-attack-gain":`)
	fflib.AppendFloat(buf, float64(mj.Vbg), 'g', -1, 64)
	buf.WriteString(`,"abm-vp-col-adaptation-factor":`)
	fflib.AppendFloat(buf, float64(mj.VpCaf), 'g', -1, 64)
	if mj.VpStarvation {
		buf.WriteString(`,"abm-vp-starvation":true`)
	} else {
		buf.WriteString(`,"abm-vp-starvation":false`)
	}
	if mj.RandomAges {
		buf.WriteString(`,"abm-random-ages":true`)
	} else {
		buf.WriteString(`,"abm-random-ages":false`)
	}
	if mj.RNGRandomSeed {
		buf.WriteString(`,"abm-rng-random-seed":true`)
	} else {
		buf.WriteString(`,"abm-rng-random-seed":false`)
	}
	buf.WriteString(`,"abm-rng-seedval":`)
	fflib.FormatBits2(buf, uint64(mj.RNGSeedVal), 10, mj.RNGSeedVal < 0)
	buf.WriteString(`,"abm-rng-fuzziness":`)
	fflib.AppendFloat(buf, float64(mj.Fuzzy), 'g', -1, 64)
	if mj.Logging {
		buf.WriteString(`,"abm-logging-flag":true`)
	} else {
		buf.WriteString(`,"abm-logging-flag":false`)
	}
	buf.WriteString(`,"abm-log-frequency":`)
	fflib.FormatBits2(buf, uint64(mj.LogFreq), 10, mj.LogFreq < 0)
	if mj.UseCustomLogPath {
		buf.WriteString(`,"abm-use-custom-log-filepath":true`)
	} else {
		buf.WriteString(`,"abm-use-custom-log-filepath":false`)
	}
	buf.WriteString(`,"abm-custom-log-filepath":`)
	fflib.WriteJsonString(buf, string(mj.CustomLogPath))
	buf.WriteString(`,"abm-log-filepath":`)
	fflib.WriteJsonString(buf, string(mj.LogPath))
	if mj.Visualise {
		buf.WriteString(`,"abm-visualise-flag":true`)
	} else {
		buf.WriteString(`,"abm-visualise-flag":false`)
	}
	if mj.LimitDuration {
		buf.WriteString(`,"abm-limit-duration":true`)
	} else {
		buf.WriteString(`,"abm-limit-duration":false`)
	}
	buf.WriteString(`,"abm-fixed-duration":`)
	fflib.FormatBits2(buf, uint64(mj.FixedDuration), 10, mj.FixedDuration < 0)
	buf.WriteString(`,"abm-session-identifier":`)
	fflib.WriteJsonString(buf, string(mj.SessionIdentifier))
	buf.WriteString(`,"PopCPP":`)
	if mj.PopCPP != nil {
		buf.WriteString(`[`)
		for i, v := range mj.PopCPP {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				obj, err = v.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"DefinitionCPP":`)
	if mj.DefinitionCPP != nil {
		buf.WriteString(`[`)
		for i, v := range mj.DefinitionCPP {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.WriteJsonString(buf, string(v))
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"PopVP":`)
	if mj.PopVP != nil {
		buf.WriteString(`[`)
		for i, v := range mj.PopVP {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				obj, err = v.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"DefinitionVP":`)
	if mj.DefinitionVP != nil {
		buf.WriteString(`[`)
		for i, v := range mj.DefinitionVP {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.WriteJsonString(buf, string(v))
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Modelbase = iota
	ffj_t_Modelno_such_key

	ffj_t_Model_Dead

	ffj_t_Model_Om

	ffj_t_Model_Im

	ffj_t_Model_Quit

	ffj_t_Model_Turn

	ffj_t_Model_Phase

	ffj_t_Model_Action

	ffj_t_Model_Bounds

	ffj_t_Model_Dimensionality

	ffj_t_Model_BG

	ffj_t_Model_Environment

	ffj_t_Model_CppPopulationStart

	ffj_t_Model_CppPopulationCap

	ffj_t_Model_CppAgeing

	ffj_t_Model_CppLifespan

	ffj_t_Model_CppS

	ffj_t_Model_CppA

	ffj_t_Model_CppTurn

	ffj_t_Model_CppSr

	ffj_t_Model_CppGestation

	ffj_t_Model_CppSexualCost

	ffj_t_Model_CppReproductionChance

	ffj_t_Model_CppSpawnSize

	ffj_t_Model_CppMutationFactor

	ffj_t_Model_VpPopulationStart

	ffj_t_Model_VpPopulationCap

	ffj_t_Model_VpAgeing

	ffj_t_Model_VpLifespan

	ffj_t_Model_VpStarvationPoint

	ffj_t_Model_VpPanicPoint

	ffj_t_Model_VpGestation

	ffj_t_Model_VpSexualRequirement

	ffj_t_Model_VpMovS

	ffj_t_Model_VpMovA

	ffj_t_Model_VpTurn

	ffj_t_Model_Vsr

	ffj_t_Model_Vb𝛄

	ffj_t_Model_V𝛄Bump

	ffj_t_Model_Vbε

	ffj_t_Model_Vmε

	ffj_t_Model_VpReproductionChance

	ffj_t_Model_VpSpawnSize

	ffj_t_Model_VpSearchChance

	ffj_t_Model_VpAttackChance

	ffj_t_Model_Vbg

	ffj_t_Model_VpCaf

	ffj_t_Model_VpStarvation

	ffj_t_Model_RandomAges

	ffj_t_Model_RNGRandomSeed

	ffj_t_Model_RNGSeedVal

	ffj_t_Model_Fuzzy

	ffj_t_Model_Logging

	ffj_t_Model_LogFreq

	ffj_t_Model_UseCustomLogPath

	ffj_t_Model_CustomLogPath

	ffj_t_Model_LogPath

	ffj_t_Model_Visualise

	ffj_t_Model_LimitDuration

	ffj_t_Model_FixedDuration

	ffj_t_Model_SessionIdentifier

	ffj_t_Model_PopCPP

	ffj_t_Model_DefinitionCPP

	ffj_t_Model_PopVP

	ffj_t_Model_DefinitionVP
)

var ffj_key_Model_Dead = []byte("Dead")

var ffj_key_Model_Om = []byte("Om")

var ffj_key_Model_Im = []byte("Im")

var ffj_key_Model_Quit = []byte("Quit")

var ffj_key_Model_Turn = []byte("Turn")

var ffj_key_Model_Phase = []byte("Phase")

var ffj_key_Model_Action = []byte("Action")

var ffj_key_Model_Bounds = []byte("abm-environment-bounds")

var ffj_key_Model_Dimensionality = []byte("abm-environment-dimensionality")

var ffj_key_Model_BG = []byte("abm-environment-background")

var ffj_key_Model_Environment = []byte("abm-environment-bounds")

var ffj_key_Model_CppPopulationStart = []byte("abm-cpp-pop-start")

var ffj_key_Model_CppPopulationCap = []byte("abm-cpp-pop-cap")

var ffj_key_Model_CppAgeing = []byte("abm-cpp-ageing")

var ffj_key_Model_CppLifespan = []byte("abm-cpp-lifespan")

var ffj_key_Model_CppS = []byte("abm-cpp-speed")

var ffj_key_Model_CppA = []byte("abm-cpp-acceleration")

var ffj_key_Model_CppTurn = []byte("abm-cpp-turn")

var ffj_key_Model_CppSr = []byte("abm-cpp-sr")

var ffj_key_Model_CppGestation = []byte("abm-cpp-gestation")

var ffj_key_Model_CppSexualCost = []byte("abm-cpp-sexual-cost")

var ffj_key_Model_CppReproductionChance = []byte("abm-cpp-reproduction-chance")

var ffj_key_Model_CppSpawnSize = []byte("abm-cpp-spawn-size")

var ffj_key_Model_CppMutationFactor = []byte("abm-cpp-mf")

var ffj_key_Model_VpPopulationStart = []byte("abm-vp-pop-start")

var ffj_key_Model_VpPopulationCap = []byte("abm-vp-pop-cap")

var ffj_key_Model_VpAgeing = []byte("abm-vp-ageing")

var ffj_key_Model_VpLifespan = []byte("abm-vp-lifespan")

var ffj_key_Model_VpStarvationPoint = []byte("abm-vp-starvation-point")

var ffj_key_Model_VpPanicPoint = []byte("abm-vp-panic-point")

var ffj_key_Model_VpGestation = []byte("abm-vp-gestation")

var ffj_key_Model_VpSexualRequirement = []byte("abm-vp-sex-req")

var ffj_key_Model_VpMovS = []byte("abm-vp-speed")

var ffj_key_Model_VpMovA = []byte("abm-vp-acceleration")

var ffj_key_Model_VpTurn = []byte("abm-vp-turn")

var ffj_key_Model_Vsr = []byte("abm-vp-vsr")

var ffj_key_Model_Vb𝛄 = []byte("abm-vp-visual-search-tolerance")

var ffj_key_Model_V𝛄Bump = []byte("abm-vp-visual-search-tolerance-bump")

var ffj_key_Model_Vbε = []byte("abm-vp-baseline-col-sig-strength")

var ffj_key_Model_Vmε = []byte("abm-vp-max-col-sig-strength")

var ffj_key_Model_VpReproductionChance = []byte("abm-vp-reproduction-chance")

var ffj_key_Model_VpSpawnSize = []byte("abm-vp-spawn-size")

var ffj_key_Model_VpSearchChance = []byte("abm-vp-vsr-chance")

var ffj_key_Model_VpAttackChance = []byte("abm-vp-attack-chance")

var ffj_key_Model_Vbg = []byte("abm-vp-baseline-attack-gain")

var ffj_key_Model_VpCaf = []byte("abm-vp-col-adaptation-factor")

var ffj_key_Model_VpStarvation = []byte("abm-vp-starvation")

var ffj_key_Model_RandomAges = []byte("abm-random-ages")

var ffj_key_Model_RNGRandomSeed = []byte("abm-rng-random-seed")

var ffj_key_Model_RNGSeedVal = []byte("abm-rng-seedval")

var ffj_key_Model_Fuzzy = []byte("abm-rng-fuzziness")

var ffj_key_Model_Logging = []byte("abm-logging-flag")

var ffj_key_Model_LogFreq = []byte("abm-log-frequency")

var ffj_key_Model_UseCustomLogPath = []byte("abm-use-custom-log-filepath")

var ffj_key_Model_CustomLogPath = []byte("abm-custom-log-filepath")

var ffj_key_Model_LogPath = []byte("abm-log-filepath")

var ffj_key_Model_Visualise = []byte("abm-visualise-flag")

var ffj_key_Model_LimitDuration = []byte("abm-limit-duration")

var ffj_key_Model_FixedDuration = []byte("abm-fixed-duration")

var ffj_key_Model_SessionIdentifier = []byte("abm-session-identifier")

var ffj_key_Model_PopCPP = []byte("PopCPP")

var ffj_key_Model_DefinitionCPP = []byte("DefinitionCPP")

var ffj_key_Model_PopVP = []byte("PopVP")

var ffj_key_Model_DefinitionVP = []byte("DefinitionVP")

func (uj *Model) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Model) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Modelbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Modelno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'A':

					if bytes.Equal(ffj_key_Model_Action, kn) {
						currentKey = ffj_t_Model_Action
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'D':

					if bytes.Equal(ffj_key_Model_Dead, kn) {
						currentKey = ffj_t_Model_Dead
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_DefinitionCPP, kn) {
						currentKey = ffj_t_Model_DefinitionCPP
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_DefinitionVP, kn) {
						currentKey = ffj_t_Model_DefinitionVP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'I':

					if bytes.Equal(ffj_key_Model_Im, kn) {
						currentKey = ffj_t_Model_Im
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'O':

					if bytes.Equal(ffj_key_Model_Om, kn) {
						currentKey = ffj_t_Model_Om
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'P':

					if bytes.Equal(ffj_key_Model_Phase, kn) {
						currentKey = ffj_t_Model_Phase
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_PopCPP, kn) {
						currentKey = ffj_t_Model_PopCPP
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_PopVP, kn) {
						currentKey = ffj_t_Model_PopVP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'Q':

					if bytes.Equal(ffj_key_Model_Quit, kn) {
						currentKey = ffj_t_Model_Quit
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffj_key_Model_Turn, kn) {
						currentKey = ffj_t_Model_Turn
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'a':

					if bytes.Equal(ffj_key_Model_Bounds, kn) {
						currentKey = ffj_t_Model_Bounds
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Dimensionality, kn) {
						currentKey = ffj_t_Model_Dimensionality
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_BG, kn) {
						currentKey = ffj_t_Model_BG
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Environment, kn) {
						currentKey = ffj_t_Model_Environment
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppPopulationStart, kn) {
						currentKey = ffj_t_Model_CppPopulationStart
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppPopulationCap, kn) {
						currentKey = ffj_t_Model_CppPopulationCap
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppAgeing, kn) {
						currentKey = ffj_t_Model_CppAgeing
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppLifespan, kn) {
						currentKey = ffj_t_Model_CppLifespan
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppS, kn) {
						currentKey = ffj_t_Model_CppS
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppA, kn) {
						currentKey = ffj_t_Model_CppA
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppTurn, kn) {
						currentKey = ffj_t_Model_CppTurn
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppSr, kn) {
						currentKey = ffj_t_Model_CppSr
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppGestation, kn) {
						currentKey = ffj_t_Model_CppGestation
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppSexualCost, kn) {
						currentKey = ffj_t_Model_CppSexualCost
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppReproductionChance, kn) {
						currentKey = ffj_t_Model_CppReproductionChance
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppSpawnSize, kn) {
						currentKey = ffj_t_Model_CppSpawnSize
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CppMutationFactor, kn) {
						currentKey = ffj_t_Model_CppMutationFactor
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpPopulationStart, kn) {
						currentKey = ffj_t_Model_VpPopulationStart
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpPopulationCap, kn) {
						currentKey = ffj_t_Model_VpPopulationCap
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpAgeing, kn) {
						currentKey = ffj_t_Model_VpAgeing
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpLifespan, kn) {
						currentKey = ffj_t_Model_VpLifespan
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpStarvationPoint, kn) {
						currentKey = ffj_t_Model_VpStarvationPoint
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpPanicPoint, kn) {
						currentKey = ffj_t_Model_VpPanicPoint
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpGestation, kn) {
						currentKey = ffj_t_Model_VpGestation
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpSexualRequirement, kn) {
						currentKey = ffj_t_Model_VpSexualRequirement
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpMovS, kn) {
						currentKey = ffj_t_Model_VpMovS
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpMovA, kn) {
						currentKey = ffj_t_Model_VpMovA
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpTurn, kn) {
						currentKey = ffj_t_Model_VpTurn
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Vsr, kn) {
						currentKey = ffj_t_Model_Vsr
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Vb𝛄, kn) {
						currentKey = ffj_t_Model_Vb𝛄
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_V𝛄Bump, kn) {
						currentKey = ffj_t_Model_V𝛄Bump
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Vbε, kn) {
						currentKey = ffj_t_Model_Vbε
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Vmε, kn) {
						currentKey = ffj_t_Model_Vmε
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpReproductionChance, kn) {
						currentKey = ffj_t_Model_VpReproductionChance
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpSpawnSize, kn) {
						currentKey = ffj_t_Model_VpSpawnSize
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpSearchChance, kn) {
						currentKey = ffj_t_Model_VpSearchChance
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpAttackChance, kn) {
						currentKey = ffj_t_Model_VpAttackChance
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Vbg, kn) {
						currentKey = ffj_t_Model_Vbg
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpCaf, kn) {
						currentKey = ffj_t_Model_VpCaf
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_VpStarvation, kn) {
						currentKey = ffj_t_Model_VpStarvation
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_RandomAges, kn) {
						currentKey = ffj_t_Model_RandomAges
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_RNGRandomSeed, kn) {
						currentKey = ffj_t_Model_RNGRandomSeed
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_RNGSeedVal, kn) {
						currentKey = ffj_t_Model_RNGSeedVal
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Fuzzy, kn) {
						currentKey = ffj_t_Model_Fuzzy
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Logging, kn) {
						currentKey = ffj_t_Model_Logging
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_LogFreq, kn) {
						currentKey = ffj_t_Model_LogFreq
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_UseCustomLogPath, kn) {
						currentKey = ffj_t_Model_UseCustomLogPath
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_CustomLogPath, kn) {
						currentKey = ffj_t_Model_CustomLogPath
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_LogPath, kn) {
						currentKey = ffj_t_Model_LogPath
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_Visualise, kn) {
						currentKey = ffj_t_Model_Visualise
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_LimitDuration, kn) {
						currentKey = ffj_t_Model_LimitDuration
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_FixedDuration, kn) {
						currentKey = ffj_t_Model_FixedDuration
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Model_SessionIdentifier, kn) {
						currentKey = ffj_t_Model_SessionIdentifier
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_DefinitionVP, kn) {
					currentKey = ffj_t_Model_DefinitionVP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_PopVP, kn) {
					currentKey = ffj_t_Model_PopVP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_DefinitionCPP, kn) {
					currentKey = ffj_t_Model_DefinitionCPP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_PopCPP, kn) {
					currentKey = ffj_t_Model_PopCPP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_SessionIdentifier, kn) {
					currentKey = ffj_t_Model_SessionIdentifier
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_FixedDuration, kn) {
					currentKey = ffj_t_Model_FixedDuration
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_LimitDuration, kn) {
					currentKey = ffj_t_Model_LimitDuration
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Visualise, kn) {
					currentKey = ffj_t_Model_Visualise
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_LogPath, kn) {
					currentKey = ffj_t_Model_LogPath
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_CustomLogPath, kn) {
					currentKey = ffj_t_Model_CustomLogPath
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_UseCustomLogPath, kn) {
					currentKey = ffj_t_Model_UseCustomLogPath
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_LogFreq, kn) {
					currentKey = ffj_t_Model_LogFreq
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_Logging, kn) {
					currentKey = ffj_t_Model_Logging
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Fuzzy, kn) {
					currentKey = ffj_t_Model_Fuzzy
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_RNGSeedVal, kn) {
					currentKey = ffj_t_Model_RNGSeedVal
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_RNGRandomSeed, kn) {
					currentKey = ffj_t_Model_RNGRandomSeed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_RandomAges, kn) {
					currentKey = ffj_t_Model_RandomAges
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpStarvation, kn) {
					currentKey = ffj_t_Model_VpStarvation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_VpCaf, kn) {
					currentKey = ffj_t_Model_VpCaf
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Vbg, kn) {
					currentKey = ffj_t_Model_Vbg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpAttackChance, kn) {
					currentKey = ffj_t_Model_VpAttackChance
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpSearchChance, kn) {
					currentKey = ffj_t_Model_VpSearchChance
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpSpawnSize, kn) {
					currentKey = ffj_t_Model_VpSpawnSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_VpReproductionChance, kn) {
					currentKey = ffj_t_Model_VpReproductionChance
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Vmε, kn) {
					currentKey = ffj_t_Model_Vmε
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Vbε, kn) {
					currentKey = ffj_t_Model_Vbε
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_V𝛄Bump, kn) {
					currentKey = ffj_t_Model_V𝛄Bump
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Vb𝛄, kn) {
					currentKey = ffj_t_Model_Vb𝛄
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Vsr, kn) {
					currentKey = ffj_t_Model_Vsr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_VpTurn, kn) {
					currentKey = ffj_t_Model_VpTurn
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_VpMovA, kn) {
					currentKey = ffj_t_Model_VpMovA
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpMovS, kn) {
					currentKey = ffj_t_Model_VpMovS
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpSexualRequirement, kn) {
					currentKey = ffj_t_Model_VpSexualRequirement
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpGestation, kn) {
					currentKey = ffj_t_Model_VpGestation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_VpPanicPoint, kn) {
					currentKey = ffj_t_Model_VpPanicPoint
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpStarvationPoint, kn) {
					currentKey = ffj_t_Model_VpStarvationPoint
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpLifespan, kn) {
					currentKey = ffj_t_Model_VpLifespan
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_VpAgeing, kn) {
					currentKey = ffj_t_Model_VpAgeing
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_VpPopulationCap, kn) {
					currentKey = ffj_t_Model_VpPopulationCap
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_VpPopulationStart, kn) {
					currentKey = ffj_t_Model_VpPopulationStart
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_CppMutationFactor, kn) {
					currentKey = ffj_t_Model_CppMutationFactor
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_CppSpawnSize, kn) {
					currentKey = ffj_t_Model_CppSpawnSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_CppReproductionChance, kn) {
					currentKey = ffj_t_Model_CppReproductionChance
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_CppSexualCost, kn) {
					currentKey = ffj_t_Model_CppSexualCost
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_CppGestation, kn) {
					currentKey = ffj_t_Model_CppGestation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_CppSr, kn) {
					currentKey = ffj_t_Model_CppSr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_CppTurn, kn) {
					currentKey = ffj_t_Model_CppTurn
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_CppA, kn) {
					currentKey = ffj_t_Model_CppA
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_CppS, kn) {
					currentKey = ffj_t_Model_CppS
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_CppLifespan, kn) {
					currentKey = ffj_t_Model_CppLifespan
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_CppAgeing, kn) {
					currentKey = ffj_t_Model_CppAgeing
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Model_CppPopulationCap, kn) {
					currentKey = ffj_t_Model_CppPopulationCap
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_CppPopulationStart, kn) {
					currentKey = ffj_t_Model_CppPopulationStart
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Environment, kn) {
					currentKey = ffj_t_Model_Environment
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_BG, kn) {
					currentKey = ffj_t_Model_BG
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Dimensionality, kn) {
					currentKey = ffj_t_Model_Dimensionality
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Bounds, kn) {
					currentKey = ffj_t_Model_Bounds
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_Action, kn) {
					currentKey = ffj_t_Model_Action
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Model_Phase, kn) {
					currentKey = ffj_t_Model_Phase
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_Turn, kn) {
					currentKey = ffj_t_Model_Turn
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_Quit, kn) {
					currentKey = ffj_t_Model_Quit
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_Im, kn) {
					currentKey = ffj_t_Model_Im
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_Om, kn) {
					currentKey = ffj_t_Model_Om
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Model_Dead, kn) {
					currentKey = ffj_t_Model_Dead
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Modelno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Model_Dead:
					goto handle_Dead

				case ffj_t_Model_Om:
					goto handle_Om

				case ffj_t_Model_Im:
					goto handle_Im

				case ffj_t_Model_Quit:
					goto handle_Quit

				case ffj_t_Model_Turn:
					goto handle_Turn

				case ffj_t_Model_Phase:
					goto handle_Phase

				case ffj_t_Model_Action:
					goto handle_Action

				case ffj_t_Model_Bounds:
					goto handle_Bounds

				case ffj_t_Model_Dimensionality:
					goto handle_Dimensionality

				case ffj_t_Model_BG:
					goto handle_BG

				case ffj_t_Model_Environment:
					goto handle_Environment

				case ffj_t_Model_CppPopulationStart:
					goto handle_CppPopulationStart

				case ffj_t_Model_CppPopulationCap:
					goto handle_CppPopulationCap

				case ffj_t_Model_CppAgeing:
					goto handle_CppAgeing

				case ffj_t_Model_CppLifespan:
					goto handle_CppLifespan

				case ffj_t_Model_CppS:
					goto handle_CppS

				case ffj_t_Model_CppA:
					goto handle_CppA

				case ffj_t_Model_CppTurn:
					goto handle_CppTurn

				case ffj_t_Model_CppSr:
					goto handle_CppSr

				case ffj_t_Model_CppGestation:
					goto handle_CppGestation

				case ffj_t_Model_CppSexualCost:
					goto handle_CppSexualCost

				case ffj_t_Model_CppReproductionChance:
					goto handle_CppReproductionChance

				case ffj_t_Model_CppSpawnSize:
					goto handle_CppSpawnSize

				case ffj_t_Model_CppMutationFactor:
					goto handle_CppMutationFactor

				case ffj_t_Model_VpPopulationStart:
					goto handle_VpPopulationStart

				case ffj_t_Model_VpPopulationCap:
					goto handle_VpPopulationCap

				case ffj_t_Model_VpAgeing:
					goto handle_VpAgeing

				case ffj_t_Model_VpLifespan:
					goto handle_VpLifespan

				case ffj_t_Model_VpStarvationPoint:
					goto handle_VpStarvationPoint

				case ffj_t_Model_VpPanicPoint:
					goto handle_VpPanicPoint

				case ffj_t_Model_VpGestation:
					goto handle_VpGestation

				case ffj_t_Model_VpSexualRequirement:
					goto handle_VpSexualRequirement

				case ffj_t_Model_VpMovS:
					goto handle_VpMovS

				case ffj_t_Model_VpMovA:
					goto handle_VpMovA

				case ffj_t_Model_VpTurn:
					goto handle_VpTurn

				case ffj_t_Model_Vsr:
					goto handle_Vsr

				case ffj_t_Model_Vb𝛄:
					goto handle_Vb𝛄

				case ffj_t_Model_V𝛄Bump:
					goto handle_V𝛄Bump

				case ffj_t_Model_Vbε:
					goto handle_Vbε

				case ffj_t_Model_Vmε:
					goto handle_Vmε

				case ffj_t_Model_VpReproductionChance:
					goto handle_VpReproductionChance

				case ffj_t_Model_VpSpawnSize:
					goto handle_VpSpawnSize

				case ffj_t_Model_VpSearchChance:
					goto handle_VpSearchChance

				case ffj_t_Model_VpAttackChance:
					goto handle_VpAttackChance

				case ffj_t_Model_Vbg:
					goto handle_Vbg

				case ffj_t_Model_VpCaf:
					goto handle_VpCaf

				case ffj_t_Model_VpStarvation:
					goto handle_VpStarvation

				case ffj_t_Model_RandomAges:
					goto handle_RandomAges

				case ffj_t_Model_RNGRandomSeed:
					goto handle_RNGRandomSeed

				case ffj_t_Model_RNGSeedVal:
					goto handle_RNGSeedVal

				case ffj_t_Model_Fuzzy:
					goto handle_Fuzzy

				case ffj_t_Model_Logging:
					goto handle_Logging

				case ffj_t_Model_LogFreq:
					goto handle_LogFreq

				case ffj_t_Model_UseCustomLogPath:
					goto handle_UseCustomLogPath

				case ffj_t_Model_CustomLogPath:
					goto handle_CustomLogPath

				case ffj_t_Model_LogPath:
					goto handle_LogPath

				case ffj_t_Model_Visualise:
					goto handle_Visualise

				case ffj_t_Model_LimitDuration:
					goto handle_LimitDuration

				case ffj_t_Model_FixedDuration:
					goto handle_FixedDuration

				case ffj_t_Model_SessionIdentifier:
					goto handle_SessionIdentifier

				case ffj_t_Model_PopCPP:
					goto handle_PopCPP

				case ffj_t_Model_DefinitionCPP:
					goto handle_DefinitionCPP

				case ffj_t_Model_PopVP:
					goto handle_PopVP

				case ffj_t_Model_DefinitionVP:
					goto handle_DefinitionVP

				case ffj_t_Modelno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Dead:

	/* handler: uj.Dead type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.Dead = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.Dead = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Om:

	/* handler: uj.Om type=chan gobr.OutMsg kind=chan quoted=false*/

	{
		/* Falling back. type=chan gobr.OutMsg kind=chan */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Om)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Im:

	/* handler: uj.Im type=chan gobr.InMsg kind=chan quoted=false*/

	{
		/* Falling back. type=chan gobr.InMsg kind=chan */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Im)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Quit:

	/* handler: uj.Quit type=chan struct {} kind=chan quoted=false*/

	{
		/* Falling back. type=chan struct {} kind=chan */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Quit)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Turn:

	/* handler: uj.Turn type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Turn = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Phase:

	/* handler: uj.Phase type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Phase = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Action:

	/* handler: uj.Action type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Action = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Bounds:

	/* handler: uj.Bounds type=[]float64 kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Bounds = nil
		} else {

			uj.Bounds = make([]float64, 0)

			wantVal := true

			for {

				var tmp_uj__Bounds float64

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Bounds type=float64 kind=float64 quoted=false*/

				{
					if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						tmp_uj__Bounds = float64(tval)

					}
				}

				uj.Bounds = append(uj.Bounds, tmp_uj__Bounds)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Dimensionality:

	/* handler: uj.Dimensionality type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Dimensionality = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BG:

	/* handler: uj.BG type=colour.RGB kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			state = fflib.FFParse_after_value
			goto mainparse
		}

		err = uj.BG.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Environment:

	/* handler: uj.Environment type=abm.Environment kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			state = fflib.FFParse_after_value
			goto mainparse
		}

		err = uj.Environment.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppPopulationStart:

	/* handler: uj.CppPopulationStart type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppPopulationStart = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppPopulationCap:

	/* handler: uj.CppPopulationCap type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppPopulationCap = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppAgeing:

	/* handler: uj.CppAgeing type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CppAgeing = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CppAgeing = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppLifespan:

	/* handler: uj.CppLifespan type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppLifespan = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppS:

	/* handler: uj.CppS type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppS = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppA:

	/* handler: uj.CppA type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppA = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppTurn:

	/* handler: uj.CppTurn type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppTurn = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppSr:

	/* handler: uj.CppSr type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppSr = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppGestation:

	/* handler: uj.CppGestation type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppGestation = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppSexualCost:

	/* handler: uj.CppSexualCost type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppSexualCost = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppReproductionChance:

	/* handler: uj.CppReproductionChance type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppReproductionChance = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppSpawnSize:

	/* handler: uj.CppSpawnSize type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppSpawnSize = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CppMutationFactor:

	/* handler: uj.CppMutationFactor type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CppMutationFactor = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpPopulationStart:

	/* handler: uj.VpPopulationStart type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpPopulationStart = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpPopulationCap:

	/* handler: uj.VpPopulationCap type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpPopulationCap = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpAgeing:

	/* handler: uj.VpAgeing type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.VpAgeing = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.VpAgeing = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpLifespan:

	/* handler: uj.VpLifespan type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpLifespan = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpStarvationPoint:

	/* handler: uj.VpStarvationPoint type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpStarvationPoint = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpPanicPoint:

	/* handler: uj.VpPanicPoint type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpPanicPoint = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpGestation:

	/* handler: uj.VpGestation type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpGestation = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpSexualRequirement:

	/* handler: uj.VpSexualRequirement type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpSexualRequirement = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpMovS:

	/* handler: uj.VpMovS type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpMovS = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpMovA:

	/* handler: uj.VpMovA type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpMovA = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpTurn:

	/* handler: uj.VpTurn type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpTurn = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vsr:

	/* handler: uj.Vsr type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vsr = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vb𝛄:

	/* handler: uj.Vb𝛄 type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vb𝛄 = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_V𝛄Bump:

	/* handler: uj.V𝛄Bump type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.V𝛄Bump = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vbε:

	/* handler: uj.Vbε type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vbε = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vmε:

	/* handler: uj.Vmε type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vmε = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpReproductionChance:

	/* handler: uj.VpReproductionChance type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpReproductionChance = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpSpawnSize:

	/* handler: uj.VpSpawnSize type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpSpawnSize = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpSearchChance:

	/* handler: uj.VpSearchChance type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpSearchChance = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpAttackChance:

	/* handler: uj.VpAttackChance type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpAttackChance = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vbg:

	/* handler: uj.Vbg type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Vbg = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpCaf:

	/* handler: uj.VpCaf type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.VpCaf = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VpStarvation:

	/* handler: uj.VpStarvation type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.VpStarvation = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.VpStarvation = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RandomAges:

	/* handler: uj.RandomAges type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.RandomAges = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.RandomAges = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RNGRandomSeed:

	/* handler: uj.RNGRandomSeed type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.RNGRandomSeed = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.RNGRandomSeed = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RNGSeedVal:

	/* handler: uj.RNGSeedVal type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.RNGSeedVal = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Fuzzy:

	/* handler: uj.Fuzzy type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Fuzzy = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Logging:

	/* handler: uj.Logging type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.Logging = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.Logging = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LogFreq:

	/* handler: uj.LogFreq type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.LogFreq = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UseCustomLogPath:

	/* handler: uj.UseCustomLogPath type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.UseCustomLogPath = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.UseCustomLogPath = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CustomLogPath:

	/* handler: uj.CustomLogPath type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.CustomLogPath = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LogPath:

	/* handler: uj.LogPath type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.LogPath = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Visualise:

	/* handler: uj.Visualise type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.Visualise = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.Visualise = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LimitDuration:

	/* handler: uj.LimitDuration type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.LimitDuration = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.LimitDuration = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FixedDuration:

	/* handler: uj.FixedDuration type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.FixedDuration = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SessionIdentifier:

	/* handler: uj.SessionIdentifier type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SessionIdentifier = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PopCPP:

	/* handler: uj.PopCPP type=[]abm.ColourPolymorphicPrey kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.PopCPP = nil
		} else {

			uj.PopCPP = make([]ColourPolymorphicPrey, 0)

			wantVal := true

			for {

				var tmp_uj__PopCPP ColourPolymorphicPrey

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__PopCPP type=abm.ColourPolymorphicPrey kind=struct quoted=false*/

				{
					/* Falling back. type=abm.ColourPolymorphicPrey kind=struct */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmp_uj__PopCPP)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				uj.PopCPP = append(uj.PopCPP, tmp_uj__PopCPP)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefinitionCPP:

	/* handler: uj.DefinitionCPP type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.DefinitionCPP = nil
		} else {

			uj.DefinitionCPP = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__DefinitionCPP string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__DefinitionCPP type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__DefinitionCPP = string(string(outBuf))

					}
				}

				uj.DefinitionCPP = append(uj.DefinitionCPP, tmp_uj__DefinitionCPP)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PopVP:

	/* handler: uj.PopVP type=[]abm.VisualPredator kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.PopVP = nil
		} else {

			uj.PopVP = make([]VisualPredator, 0)

			wantVal := true

			for {

				var tmp_uj__PopVP VisualPredator

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__PopVP type=abm.VisualPredator kind=struct quoted=false*/

				{
					/* Falling back. type=abm.VisualPredator kind=struct */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmp_uj__PopVP)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				uj.PopVP = append(uj.PopVP, tmp_uj__PopVP)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefinitionVP:

	/* handler: uj.DefinitionVP type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.DefinitionVP = nil
		} else {

			uj.DefinitionVP = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__DefinitionVP string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__DefinitionVP type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__DefinitionVP = string(string(outBuf))

					}
				}

				uj.DefinitionVP = append(uj.DefinitionVP, tmp_uj__DefinitionVP)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *PopulationCPP) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *PopulationCPP) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"PopCPP":`)
	if mj.PopCPP != nil {
		buf.WriteString(`[`)
		for i, v := range mj.PopCPP {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				obj, err = v.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"DefinitionCPP":`)
	if mj.DefinitionCPP != nil {
		buf.WriteString(`[`)
		for i, v := range mj.DefinitionCPP {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.WriteJsonString(buf, string(v))
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_PopulationCPPbase = iota
	ffj_t_PopulationCPPno_such_key

	ffj_t_PopulationCPP_PopCPP

	ffj_t_PopulationCPP_DefinitionCPP
)

var ffj_key_PopulationCPP_PopCPP = []byte("PopCPP")

var ffj_key_PopulationCPP_DefinitionCPP = []byte("DefinitionCPP")

func (uj *PopulationCPP) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *PopulationCPP) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_PopulationCPPbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_PopulationCPPno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'D':

					if bytes.Equal(ffj_key_PopulationCPP_DefinitionCPP, kn) {
						currentKey = ffj_t_PopulationCPP_DefinitionCPP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'P':

					if bytes.Equal(ffj_key_PopulationCPP_PopCPP, kn) {
						currentKey = ffj_t_PopulationCPP_PopCPP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_PopulationCPP_DefinitionCPP, kn) {
					currentKey = ffj_t_PopulationCPP_DefinitionCPP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PopulationCPP_PopCPP, kn) {
					currentKey = ffj_t_PopulationCPP_PopCPP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_PopulationCPPno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_PopulationCPP_PopCPP:
					goto handle_PopCPP

				case ffj_t_PopulationCPP_DefinitionCPP:
					goto handle_DefinitionCPP

				case ffj_t_PopulationCPPno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_PopCPP:

	/* handler: uj.PopCPP type=[]abm.ColourPolymorphicPrey kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.PopCPP = nil
		} else {

			uj.PopCPP = make([]ColourPolymorphicPrey, 0)

			wantVal := true

			for {

				var tmp_uj__PopCPP ColourPolymorphicPrey

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__PopCPP type=abm.ColourPolymorphicPrey kind=struct quoted=false*/

				{
					/* Falling back. type=abm.ColourPolymorphicPrey kind=struct */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmp_uj__PopCPP)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				uj.PopCPP = append(uj.PopCPP, tmp_uj__PopCPP)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefinitionCPP:

	/* handler: uj.DefinitionCPP type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.DefinitionCPP = nil
		} else {

			uj.DefinitionCPP = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__DefinitionCPP string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__DefinitionCPP type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__DefinitionCPP = string(string(outBuf))

					}
				}

				uj.DefinitionCPP = append(uj.DefinitionCPP, tmp_uj__DefinitionCPP)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *PopulationVP) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *PopulationVP) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"PopVP":`)
	if mj.PopVP != nil {
		buf.WriteString(`[`)
		for i, v := range mj.PopVP {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				obj, err = v.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"DefinitionVP":`)
	if mj.DefinitionVP != nil {
		buf.WriteString(`[`)
		for i, v := range mj.DefinitionVP {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.WriteJsonString(buf, string(v))
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_PopulationVPbase = iota
	ffj_t_PopulationVPno_such_key

	ffj_t_PopulationVP_PopVP

	ffj_t_PopulationVP_DefinitionVP
)

var ffj_key_PopulationVP_PopVP = []byte("PopVP")

var ffj_key_PopulationVP_DefinitionVP = []byte("DefinitionVP")

func (uj *PopulationVP) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *PopulationVP) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_PopulationVPbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_PopulationVPno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'D':

					if bytes.Equal(ffj_key_PopulationVP_DefinitionVP, kn) {
						currentKey = ffj_t_PopulationVP_DefinitionVP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'P':

					if bytes.Equal(ffj_key_PopulationVP_PopVP, kn) {
						currentKey = ffj_t_PopulationVP_PopVP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_PopulationVP_DefinitionVP, kn) {
					currentKey = ffj_t_PopulationVP_DefinitionVP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PopulationVP_PopVP, kn) {
					currentKey = ffj_t_PopulationVP_PopVP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_PopulationVPno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_PopulationVP_PopVP:
					goto handle_PopVP

				case ffj_t_PopulationVP_DefinitionVP:
					goto handle_DefinitionVP

				case ffj_t_PopulationVPno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_PopVP:

	/* handler: uj.PopVP type=[]abm.VisualPredator kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.PopVP = nil
		} else {

			uj.PopVP = make([]VisualPredator, 0)

			wantVal := true

			for {

				var tmp_uj__PopVP VisualPredator

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__PopVP type=abm.VisualPredator kind=struct quoted=false*/

				{
					/* Falling back. type=abm.VisualPredator kind=struct */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmp_uj__PopVP)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				uj.PopVP = append(uj.PopVP, tmp_uj__PopVP)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefinitionVP:

	/* handler: uj.DefinitionVP type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.DefinitionVP = nil
		} else {

			uj.DefinitionVP = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__DefinitionVP string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__DefinitionVP type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__DefinitionVP = string(string(outBuf))

					}
				}

				uj.DefinitionVP = append(uj.DefinitionVP, tmp_uj__DefinitionVP)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *Timeframe) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Timeframe) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Turn":`)
	fflib.FormatBits2(buf, uint64(mj.Turn), 10, mj.Turn < 0)
	buf.WriteString(`,"Phase":`)
	fflib.FormatBits2(buf, uint64(mj.Phase), 10, mj.Phase < 0)
	buf.WriteString(`,"Action":`)
	fflib.FormatBits2(buf, uint64(mj.Action), 10, mj.Action < 0)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Timeframebase = iota
	ffj_t_Timeframeno_such_key

	ffj_t_Timeframe_Turn

	ffj_t_Timeframe_Phase

	ffj_t_Timeframe_Action
)

var ffj_key_Timeframe_Turn = []byte("Turn")

var ffj_key_Timeframe_Phase = []byte("Phase")

var ffj_key_Timeframe_Action = []byte("Action")

func (uj *Timeframe) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Timeframe) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Timeframebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Timeframeno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'A':

					if bytes.Equal(ffj_key_Timeframe_Action, kn) {
						currentKey = ffj_t_Timeframe_Action
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'P':

					if bytes.Equal(ffj_key_Timeframe_Phase, kn) {
						currentKey = ffj_t_Timeframe_Phase
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffj_key_Timeframe_Turn, kn) {
						currentKey = ffj_t_Timeframe_Turn
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Timeframe_Action, kn) {
					currentKey = ffj_t_Timeframe_Action
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Timeframe_Phase, kn) {
					currentKey = ffj_t_Timeframe_Phase
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Timeframe_Turn, kn) {
					currentKey = ffj_t_Timeframe_Turn
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Timeframeno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Timeframe_Turn:
					goto handle_Turn

				case ffj_t_Timeframe_Phase:
					goto handle_Phase

				case ffj_t_Timeframe_Action:
					goto handle_Action

				case ffj_t_Timeframeno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Turn:

	/* handler: uj.Turn type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Turn = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Phase:

	/* handler: uj.Phase type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Phase = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Action:

	/* handler: uj.Action type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Action = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
